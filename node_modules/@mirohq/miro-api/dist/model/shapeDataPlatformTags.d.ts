/**
 * Miro Developer Platform
 * <img src=\"https://content.pstmn.io/47449ea6-0ef7-4af2-bac1-e58a70e61c58/aW1hZ2UucG5n\" width=\"1685\" height=\"593\">  ### Miro Developer Platform concepts  - New to the Miro Developer Platform? Interested in learning more about platform concepts?? [Read our introduction page](https://beta.developers.miro.com/docs/introduction) and familiarize yourself with the Miro Developer Platform capabilities in a few minutes.   ### Getting started with the Miro REST API  - [Quickstart (video):](https://beta.developers.miro.com/docs/try-out-the-rest-api-in-less-than-3-minutes) try the REST API in less than 3 minutes. - [Quickstart (article):](https://beta.developers.miro.com/docs/build-your-first-hello-world-app-1) get started and try the REST API in less than 3 minutes.   ### Miro REST API tutorials  Check out our how-to articles with step-by-step instructions and code examples so you can:  - [Get started with OAuth 2.0 and Miro](https://beta.developers.miro.com/docs/getting-started-with-oauth)   ### Miro App Examples  Clone our [Miro App Examples repository](https://github.com/miroapp/app-examples) to get inspiration, customize, and explore apps built on top of Miro\'s Developer Platform 2.0.
 *
 * The version of the OpenAPI document: v2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * @internal
 * Contains shape item data, such as the content or shape type of the shape.
 */
export declare class ShapeDataPlatformTags {
    /**
     * The text you want to display on the shape.
     */
    'content'?: string;
    /**
     * Defines the geometric shape of the item when it is rendered on the board.
     */
    'shape'?: string | (typeof ShapeDataPlatformTags.ShapeEnum)[keyof typeof ShapeDataPlatformTags.ShapeEnum];
    /** @ignore */
    static discriminator: string | undefined;
    /** @ignore */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /** @ignore */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
export declare namespace ShapeDataPlatformTags {
    const ShapeEnum: {
        readonly Rectangle: "rectangle";
        readonly RoundRectangle: "round_rectangle";
        readonly Circle: "circle";
        readonly Triangle: "triangle";
        readonly Rhombus: "rhombus";
        readonly Parallelogram: "parallelogram";
        readonly Trapezoid: "trapezoid";
        readonly Pentagon: "pentagon";
        readonly Hexagon: "hexagon";
        readonly Octagon: "octagon";
        readonly WedgeRoundRectangleCallout: "wedge_round_rectangle_callout";
        readonly Star: "star";
        readonly FlowChartPredefinedProcess: "flow_chart_predefined_process";
        readonly Cloud: "cloud";
        readonly Cross: "cross";
        readonly Can: "can";
        readonly RightArrow: "right_arrow";
        readonly LeftArrow: "left_arrow";
        readonly LeftRightArrow: "left_right_arrow";
        readonly LeftBrace: "left_brace";
        readonly RightBrace: "right_brace";
    };
}
