"use strict";
/**
 * Miro Developer Platform
 * <img src=\"https://content.pstmn.io/47449ea6-0ef7-4af2-bac1-e58a70e61c58/aW1hZ2UucG5n\" width=\"1685\" height=\"593\">  ### Miro Developer Platform concepts  - New to the Miro Developer Platform? Interested in learning more about platform concepts?? [Read our introduction page](https://beta.developers.miro.com/docs/introduction) and familiarize yourself with the Miro Developer Platform capabilities in a few minutes.   ### Getting started with the Miro REST API  - [Quickstart (video):](https://beta.developers.miro.com/docs/try-out-the-rest-api-in-less-than-3-minutes) try the REST API in less than 3 minutes. - [Quickstart (article):](https://beta.developers.miro.com/docs/build-your-first-hello-world-app-1) get started and try the REST API in less than 3 minutes.   ### Miro REST API tutorials  Check out our how-to articles with step-by-step instructions and code examples so you can:  - [Get started with OAuth 2.0 and Miro](https://beta.developers.miro.com/docs/getting-started-with-oauth)   ### Miro App Examples  Clone our [Miro App Examples repository](https://github.com/miroapp/app-examples) to get inspiration, customize, and explore apps built on top of Miro\'s Developer Platform 2.0.
 *
 * The version of the OpenAPI document: v2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ItemDataCreate = void 0;
/**
 * @internal
 * Contains data information applicable for each item type.
 */
class ItemDataCreate {
    constructor() {
        /**
         * URL of the image.
         */
        this['url'] = 'https://miro.com/static/images/page/mr-index/localization/en/slider/ideation_brainstorming.png';
        /**
         * Defines the geometric shape of the sticky note and aspect ratio for its dimensions.
         */
        this['shape'] = ItemDataCreate.ShapeEnum.Square;
    }
    /** @ignore */
    static getAttributeTypeMap() {
        return ItemDataCreate.attributeTypeMap;
    }
}
exports.ItemDataCreate = ItemDataCreate;
/** @ignore */
ItemDataCreate.discriminator = undefined;
/** @ignore */
ItemDataCreate.attributeTypeMap = [
    {
        name: 'description',
        baseName: 'description',
        type: 'string',
    },
    {
        name: 'fields',
        baseName: 'fields',
        type: 'Array<CustomField>',
    },
    {
        name: 'owned',
        baseName: 'owned',
        type: 'boolean',
    },
    {
        name: 'status',
        baseName: 'status',
        type: 'ItemDataCreate.StatusEnum',
    },
    {
        name: 'title',
        baseName: 'title',
        type: 'string',
    },
    {
        name: 'assigneeId',
        baseName: 'assigneeId',
        type: 'string',
    },
    {
        name: 'dueDate',
        baseName: 'dueDate',
        type: 'Date',
    },
    {
        name: 'url',
        baseName: 'url',
        type: 'string',
    },
    {
        name: 'mode',
        baseName: 'mode',
        type: 'ItemDataCreate.ModeEnum',
    },
    {
        name: 'previewUrl',
        baseName: 'previewUrl',
        type: 'string',
    },
    {
        name: 'content',
        baseName: 'content',
        type: 'string',
    },
    {
        name: 'shape',
        baseName: 'shape',
        type: 'ItemDataCreate.ShapeEnum',
    },
];
(function (ItemDataCreate) {
    ItemDataCreate.StatusEnum = {
        Disconnected: 'disconnected',
        Connected: 'connected',
        Disabled: 'disabled',
    };
    ItemDataCreate.ModeEnum = {
        Inline: 'inline',
        Modal: 'modal',
    };
    ItemDataCreate.ShapeEnum = {
        Square: 'square',
        Rectangle: 'rectangle',
    };
})(ItemDataCreate = exports.ItemDataCreate || (exports.ItemDataCreate = {}));
