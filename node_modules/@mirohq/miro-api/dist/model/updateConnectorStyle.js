"use strict";
/**
 * Miro Developer Platform
 * <img src=\"https://content.pstmn.io/47449ea6-0ef7-4af2-bac1-e58a70e61c58/aW1hZ2UucG5n\" width=\"1685\" height=\"593\">  ### Miro Developer Platform concepts  - New to the Miro Developer Platform? Interested in learning more about platform concepts?? [Read our introduction page](https://beta.developers.miro.com/docs/introduction) and familiarize yourself with the Miro Developer Platform capabilities in a few minutes.   ### Getting started with the Miro REST API  - [Quickstart (video):](https://beta.developers.miro.com/docs/try-out-the-rest-api-in-less-than-3-minutes) try the REST API in less than 3 minutes. - [Quickstart (article):](https://beta.developers.miro.com/docs/build-your-first-hello-world-app-1) get started and try the REST API in less than 3 minutes.   ### Miro REST API tutorials  Check out our how-to articles with step-by-step instructions and code examples so you can:  - [Get started with OAuth 2.0 and Miro](https://beta.developers.miro.com/docs/getting-started-with-oauth)   ### Miro App Examples  Clone our [Miro App Examples repository](https://github.com/miroapp/app-examples) to get inspiration, customize, and explore apps built on top of Miro\'s Developer Platform 2.0.
 *
 * The version of the OpenAPI document: v2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateConnectorStyle = void 0;
/**
 * @internal
 * Contains information about the style of a connector, such as the color or caption font size
 */
class UpdateConnectorStyle {
    /** @ignore */
    static getAttributeTypeMap() {
        return UpdateConnectorStyle.attributeTypeMap;
    }
}
exports.UpdateConnectorStyle = UpdateConnectorStyle;
/** @ignore */
UpdateConnectorStyle.discriminator = undefined;
/** @ignore */
UpdateConnectorStyle.attributeTypeMap = [
    {
        name: 'color',
        baseName: 'color',
        type: 'string',
    },
    {
        name: 'endStrokeCap',
        baseName: 'endStrokeCap',
        type: 'UpdateConnectorStyle.EndStrokeCapEnum',
    },
    {
        name: 'fontSize',
        baseName: 'fontSize',
        type: 'string',
    },
    {
        name: 'startStrokeCap',
        baseName: 'startStrokeCap',
        type: 'UpdateConnectorStyle.StartStrokeCapEnum',
    },
    {
        name: 'strokeColor',
        baseName: 'strokeColor',
        type: 'string',
    },
    {
        name: 'strokeStyle',
        baseName: 'strokeStyle',
        type: 'UpdateConnectorStyle.StrokeStyleEnum',
    },
    {
        name: 'strokeWidth',
        baseName: 'strokeWidth',
        type: 'string',
    },
    {
        name: 'textOrientation',
        baseName: 'textOrientation',
        type: 'UpdateConnectorStyle.TextOrientationEnum',
    },
];
(function (UpdateConnectorStyle) {
    UpdateConnectorStyle.EndStrokeCapEnum = {
        None: 'none',
        Stealth: 'stealth',
        Diamond: 'diamond',
        FilledDiamond: 'filled_diamond',
        Oval: 'oval',
        FilledOval: 'filled_oval',
        Arrow: 'arrow',
        Triangle: 'triangle',
        FilledTriangle: 'filled_triangle',
        ErdOne: 'erd_one',
        ErdMany: 'erd_many',
        ErdOnlyOne: 'erd_only_one',
        ErdZeroOrOne: 'erd_zero_or_one',
        ErdOneOrMany: 'erd_one_or_many',
        ErdZeroOrMany: 'erd_zero_or_many',
        Unknown: 'unknown',
    };
    UpdateConnectorStyle.StartStrokeCapEnum = {
        None: 'none',
        Stealth: 'stealth',
        Diamond: 'diamond',
        FilledDiamond: 'filled_diamond',
        Oval: 'oval',
        FilledOval: 'filled_oval',
        Arrow: 'arrow',
        Triangle: 'triangle',
        FilledTriangle: 'filled_triangle',
        ErdOne: 'erd_one',
        ErdMany: 'erd_many',
        ErdOnlyOne: 'erd_only_one',
        ErdZeroOrOne: 'erd_zero_or_one',
        ErdOneOrMany: 'erd_one_or_many',
        ErdZeroOrMany: 'erd_zero_or_many',
        Unknown: 'unknown',
    };
    UpdateConnectorStyle.StrokeStyleEnum = {
        Normal: 'normal',
        Dotted: 'dotted',
        Dashed: 'dashed',
    };
    UpdateConnectorStyle.TextOrientationEnum = {
        Horizontal: 'horizontal',
        Aligned: 'aligned',
    };
})(UpdateConnectorStyle = exports.UpdateConnectorStyle || (exports.UpdateConnectorStyle = {}));
