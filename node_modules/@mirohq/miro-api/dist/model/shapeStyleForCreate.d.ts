/**
 * Miro Developer Platform
 * <img src=\"https://content.pstmn.io/47449ea6-0ef7-4af2-bac1-e58a70e61c58/aW1hZ2UucG5n\" width=\"1685\" height=\"593\">  ### Miro Developer Platform concepts  - New to the Miro Developer Platform? Interested in learning more about platform concepts?? [Read our introduction page](https://beta.developers.miro.com/docs/introduction) and familiarize yourself with the Miro Developer Platform capabilities in a few minutes.   ### Getting started with the Miro REST API  - [Quickstart (video):](https://beta.developers.miro.com/docs/try-out-the-rest-api-in-less-than-3-minutes) try the REST API in less than 3 minutes. - [Quickstart (article):](https://beta.developers.miro.com/docs/build-your-first-hello-world-app-1) get started and try the REST API in less than 3 minutes.   ### Miro REST API tutorials  Check out our how-to articles with step-by-step instructions and code examples so you can:  - [Get started with OAuth 2.0 and Miro](https://beta.developers.miro.com/docs/getting-started-with-oauth)   ### Miro App Examples  Clone our [Miro App Examples repository](https://github.com/miroapp/app-examples) to get inspiration, customize, and explore apps built on top of Miro\'s Developer Platform 2.0.
 *
 * The version of the OpenAPI document: v2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * @internal
 * Contains information about the shape style, such as the border color or opacity. <br> All properties in style object are supported for shape types aren\'t listed below. <br> <table>   <tr>     <th align=\"left\">Shape type</th>     <th align=\"left\">Unsupported properties</th>   </tr>   <tr>     <td>flow_chart_or</td>     <td>fontSize, fontFamily, color, textAlign, textAlignVertical</td>   </tr>   <tr>     <td>flow_chart_summing_junction</td>     <td>fontSize, fontFamily, color, textAlign, textAlignVertical</td>   </tr>   <tr>     <td>flow_chart_note_curly_left</td>     <td>fillColor, fillOpacity</td>   </tr>   <tr>     <td>flow_chart_note_curly_right</td>     <td>fillColor, fillOpacity</td>   </tr>   <tr>     <td>flow_chart_note_square</td>     <td>fillColor, fillOpacity</td>   </tr> </table>
 */
export declare class ShapeStyleForCreate {
    /**
     * Defines the color of the border of the shape. Default: `#1a1a1a` (dark gray).
     */
    'borderColor'?: string;
    /**
     * Defines the opacity level of the shape border. Possible values: any number between `0.0` and `1.0`, where: `0.0`: the background color is completely transparent or invisible `1.0`: the background color is completely opaque or solid Default: `1.0` (solid color).
     */
    'borderOpacity'?: string;
    /**
     * Defines the style used to represent the border of the shape. Default: `normal`.
     */
    'borderStyle'?: string | (typeof ShapeStyleForCreate.BorderStyleEnum)[keyof typeof ShapeStyleForCreate.BorderStyleEnum];
    /**
     * Defines the thickness of the shape border, in dp. Default: `2.0`.
     */
    'borderWidth'?: string;
    /**
     * Hex value representing the color for the text within the shape item. Default: `#1a1a1a`.
     */
    'color'?: string;
    /**
     * Fill color for the shape. Hex values: `#f5f6f8` `#d5f692` `#d0e17a` `#93d275` `#67c6c0` `#23bfe7` `#a6ccf5` `#7b92ff` `#fff9b1` `#f5d128` `#ff9d48` `#f16c7f` `#ea94bb` `#ffcee0` `#b384bb` `#000000` Default: #ffffff.
     */
    'fillColor'?: string;
    /**
     * Opacity level of the fill color. Possible values: any number between `0` and `1`, where: `0.0`: the background color is completely transparent or invisible `1.0`: the background color is completely opaque or solid Default: `Flowchart` shapes: `1.0`. `Basic` shapes: `1.0` if `fillColor` provided, `0.0` if no `fillColor` provided.
     */
    'fillOpacity'?: string;
    /**
     * Defines the font type for the text in the shape item. Default: `arial`.
     */
    'fontFamily'?: string | (typeof ShapeStyleForCreate.FontFamilyEnum)[keyof typeof ShapeStyleForCreate.FontFamilyEnum];
    /**
     * Defines the font size, in dp, for the text on the shape. Default: `14`.
     */
    'fontSize'?: string;
    /**
     * Defines how the shape text is horizontally aligned. Default: Flowchart shapes: `center`. Basic shapes: `left`.  `unknown` is returned for unsupported shapes.
     */
    'textAlign'?: string | (typeof ShapeStyleForCreate.TextAlignEnum)[keyof typeof ShapeStyleForCreate.TextAlignEnum];
    /**
     * Defines how the shape text is vertically aligned. Default: Flowchart shapes: `middle`. Basic shapes: `top`.  `unknown` is returned for unsupported shapes.
     */
    'textAlignVertical'?: string | (typeof ShapeStyleForCreate.TextAlignVerticalEnum)[keyof typeof ShapeStyleForCreate.TextAlignVerticalEnum];
    /** @ignore */
    static discriminator: string | undefined;
    /** @ignore */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /** @ignore */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
export declare namespace ShapeStyleForCreate {
    const BorderStyleEnum: {
        readonly Normal: "normal";
        readonly Dotted: "dotted";
        readonly Dashed: "dashed";
    };
    const FontFamilyEnum: {
        readonly Arial: "arial";
        readonly AbrilFatface: "abril_fatface";
        readonly Bangers: "bangers";
        readonly EbGaramond: "eb_garamond";
        readonly Georgia: "georgia";
        readonly Graduate: "graduate";
        readonly GravitasOne: "gravitas_one";
        readonly FredokaOne: "fredoka_one";
        readonly NixieOne: "nixie_one";
        readonly OpenSans: "open_sans";
        readonly PermanentMarker: "permanent_marker";
        readonly PtSans: "pt_sans";
        readonly PtSansNarrow: "pt_sans_narrow";
        readonly PtSerif: "pt_serif";
        readonly RammettoOne: "rammetto_one";
        readonly Roboto: "roboto";
        readonly RobotoCondensed: "roboto_condensed";
        readonly RobotoSlab: "roboto_slab";
        readonly Caveat: "caveat";
        readonly TimesNewRoman: "times_new_roman";
        readonly TitanOne: "titan_one";
        readonly LemonTuesday: "lemon_tuesday";
        readonly RobotoMono: "roboto_mono";
        readonly NotoSans: "noto_sans";
        readonly PlexSans: "plex_sans";
        readonly PlexSerif: "plex_serif";
        readonly PlexMono: "plex_mono";
        readonly Spoof: "spoof";
        readonly TiemposText: "tiempos_text";
        readonly Formular: "formular";
    };
    const TextAlignEnum: {
        readonly Left: "left";
        readonly Right: "right";
        readonly Center: "center";
        readonly Unknown: "unknown";
    };
    const TextAlignVerticalEnum: {
        readonly Top: "top";
        readonly Middle: "middle";
        readonly Bottom: "bottom";
        readonly Unknown: "unknown";
    };
}
