/**
 * Miro Developer Platform
 * <img src=\"https://content.pstmn.io/47449ea6-0ef7-4af2-bac1-e58a70e61c58/aW1hZ2UucG5n\" width=\"1685\" height=\"593\">  ### Miro Developer Platform concepts  - New to the Miro Developer Platform? Interested in learning more about platform concepts?? [Read our introduction page](https://beta.developers.miro.com/docs/introduction) and familiarize yourself with the Miro Developer Platform capabilities in a few minutes.   ### Getting started with the Miro REST API  - [Quickstart (video):](https://beta.developers.miro.com/docs/try-out-the-rest-api-in-less-than-3-minutes) try the REST API in less than 3 minutes. - [Quickstart (article):](https://beta.developers.miro.com/docs/build-your-first-hello-world-app-1) get started and try the REST API in less than 3 minutes.   ### Miro REST API tutorials  Check out our how-to articles with step-by-step instructions and code examples so you can:  - [Get started with OAuth 2.0 and Miro](https://beta.developers.miro.com/docs/getting-started-with-oauth)   ### Miro App Examples  Clone our [Miro App Examples repository](https://github.com/miroapp/app-examples) to get inspiration, customize, and explore apps built on top of Miro\'s Developer Platform 2.0.
 *
 * The version of the OpenAPI document: v2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * @internal
 * Contains information about the style of a text item, such as the fill color or font family.
 */
export declare class TextStyle {
    /**
     * Hex value representing the color for the text within the text item. Default: `#1a1a1a`.
     */
    'color'?: string;
    /**
     * Background color of the text item. Default: `#ffffff`.
     */
    'fillColor'?: string;
    /**
     * Opacity level of the background color. Possible values: any number between `0.0` and `1.0`, where: `0.0`: the background color is completely transparent or invisible. `1.0`: the background color is completely opaque or solid. Default: `1.0` if `fillColor` is provided, `0.0` if `fillColor` is not provided.
     */
    'fillOpacity'?: string;
    /**
     * Font type for the text in the text item. Default: `arial`.
     */
    'fontFamily'?: string | (typeof TextStyle.FontFamilyEnum)[keyof typeof TextStyle.FontFamilyEnum];
    /**
     * Font size, in dp. Default: `14`.
     */
    'fontSize'?: string;
    /**
     * Horizontal alignment for the item\'s content. Default: `center.`
     */
    'textAlign'?: string | (typeof TextStyle.TextAlignEnum)[keyof typeof TextStyle.TextAlignEnum];
    /** @ignore */
    static discriminator: string | undefined;
    /** @ignore */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /** @ignore */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
export declare namespace TextStyle {
    const FontFamilyEnum: {
        readonly Arial: "arial";
        readonly AbrilFatface: "abril_fatface";
        readonly Bangers: "bangers";
        readonly EbGaramond: "eb_garamond";
        readonly Georgia: "georgia";
        readonly Graduate: "graduate";
        readonly GravitasOne: "gravitas_one";
        readonly FredokaOne: "fredoka_one";
        readonly NixieOne: "nixie_one";
        readonly OpenSans: "open_sans";
        readonly PermanentMarker: "permanent_marker";
        readonly PtSans: "pt_sans";
        readonly PtSansNarrow: "pt_sans_narrow";
        readonly PtSerif: "pt_serif";
        readonly RammettoOne: "rammetto_one";
        readonly Roboto: "roboto";
        readonly RobotoCondensed: "roboto_condensed";
        readonly RobotoSlab: "roboto_slab";
        readonly Caveat: "caveat";
        readonly TimesNewRoman: "times_new_roman";
        readonly TitanOne: "titan_one";
        readonly LemonTuesday: "lemon_tuesday";
        readonly RobotoMono: "roboto_mono";
        readonly NotoSans: "noto_sans";
        readonly PlexSans: "plex_sans";
        readonly PlexSerif: "plex_serif";
        readonly PlexMono: "plex_mono";
        readonly Spoof: "spoof";
        readonly TiemposText: "tiempos_text";
        readonly Formular: "formular";
    };
    const TextAlignEnum: {
        readonly Left: "left";
        readonly Right: "right";
        readonly Center: "center";
    };
}
