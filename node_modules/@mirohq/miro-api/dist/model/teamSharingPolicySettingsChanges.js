"use strict";
/**
 * Miro Developer Platform
 * <img src=\"https://content.pstmn.io/47449ea6-0ef7-4af2-bac1-e58a70e61c58/aW1hZ2UucG5n\" width=\"1685\" height=\"593\">  ### Miro Developer Platform concepts  - New to the Miro Developer Platform? Interested in learning more about platform concepts?? [Read our introduction page](https://beta.developers.miro.com/docs/introduction) and familiarize yourself with the Miro Developer Platform capabilities in a few minutes.   ### Getting started with the Miro REST API  - [Quickstart (video):](https://beta.developers.miro.com/docs/try-out-the-rest-api-in-less-than-3-minutes) try the REST API in less than 3 minutes. - [Quickstart (article):](https://beta.developers.miro.com/docs/build-your-first-hello-world-app-1) get started and try the REST API in less than 3 minutes.   ### Miro REST API tutorials  Check out our how-to articles with step-by-step instructions and code examples so you can:  - [Get started with OAuth 2.0 and Miro](https://beta.developers.miro.com/docs/getting-started-with-oauth)   ### Miro App Examples  Clone our [Miro App Examples repository](https://github.com/miroapp/app-examples) to get inspiration, customize, and explore apps built on top of Miro\'s Developer Platform 2.0.
 *
 * The version of the OpenAPI document: v2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TeamSharingPolicySettingsChanges = void 0;
/**
 * @internal
 * Team sharing policy settings
 */
class TeamSharingPolicySettingsChanges {
    constructor() {
        /**
         *  Indicates who can change board access and invite users to boards in this team, by default. * \"team_members_with_editing_rights\": Any team member with editing rights on the board. * \"owner_and_coowners\":               Only the owner and co-owners of the board.
         */
        this['defaultBoardSharingAccess'] = TeamSharingPolicySettingsChanges.DefaultBoardSharingAccessEnum.TeamMembersWithEditingRights;
    }
    /** @ignore */
    static getAttributeTypeMap() {
        return TeamSharingPolicySettingsChanges.attributeTypeMap;
    }
}
exports.TeamSharingPolicySettingsChanges = TeamSharingPolicySettingsChanges;
/** @ignore */
TeamSharingPolicySettingsChanges.discriminator = undefined;
/** @ignore */
TeamSharingPolicySettingsChanges.attributeTypeMap = [
    {
        name: 'allowListedDomains',
        baseName: 'allowListedDomains',
        type: 'Array<string>',
    },
    {
        name: 'createAssetAccessLevel',
        baseName: 'createAssetAccessLevel',
        type: 'TeamSharingPolicySettingsChanges.CreateAssetAccessLevelEnum',
    },
    {
        name: 'defaultBoardAccess',
        baseName: 'defaultBoardAccess',
        type: 'TeamSharingPolicySettingsChanges.DefaultBoardAccessEnum',
    },
    {
        name: 'defaultBoardSharingAccess',
        baseName: 'defaultBoardSharingAccess',
        type: 'TeamSharingPolicySettingsChanges.DefaultBoardSharingAccessEnum',
    },
    {
        name: 'defaultOrganizationAccess',
        baseName: 'defaultOrganizationAccess',
        type: 'TeamSharingPolicySettingsChanges.DefaultOrganizationAccessEnum',
    },
    {
        name: 'defaultProjectAccess',
        baseName: 'defaultProjectAccess',
        type: 'TeamSharingPolicySettingsChanges.DefaultProjectAccessEnum',
    },
    {
        name: 'moveBoardToAccount',
        baseName: 'moveBoardToAccount',
        type: 'TeamSharingPolicySettingsChanges.MoveBoardToAccountEnum',
    },
    {
        name: 'restrictAllowedDomains',
        baseName: 'restrictAllowedDomains',
        type: 'TeamSharingPolicySettingsChanges.RestrictAllowedDomainsEnum',
    },
    {
        name: 'sharingOnAccount',
        baseName: 'sharingOnAccount',
        type: 'TeamSharingPolicySettingsChanges.SharingOnAccountEnum',
    },
    {
        name: 'sharingOnOrganization',
        baseName: 'sharingOnOrganization',
        type: 'TeamSharingPolicySettingsChanges.SharingOnOrganizationEnum',
    },
    {
        name: 'sharingViaPublicLink',
        baseName: 'sharingViaPublicLink',
        type: 'TeamSharingPolicySettingsChanges.SharingViaPublicLinkEnum',
    },
];
(function (TeamSharingPolicySettingsChanges) {
    TeamSharingPolicySettingsChanges.CreateAssetAccessLevelEnum = {
        CompanyAdmins: 'company_admins',
        Admins: 'admins',
        AllMembers: 'all_members',
    };
    TeamSharingPolicySettingsChanges.DefaultBoardAccessEnum = {
        Private: 'private',
        View: 'view',
        Comment: 'comment',
        Edit: 'edit',
    };
    TeamSharingPolicySettingsChanges.DefaultBoardSharingAccessEnum = {
        TeamMembersWithEditingRights: 'team_members_with_editing_rights',
        OwnerAndCoowners: 'owner_and_coowners',
    };
    TeamSharingPolicySettingsChanges.DefaultOrganizationAccessEnum = {
        Private: 'private',
        View: 'view',
        Comment: 'comment',
        Edit: 'edit',
    };
    TeamSharingPolicySettingsChanges.DefaultProjectAccessEnum = {
        Private: 'private',
        View: 'view',
    };
    TeamSharingPolicySettingsChanges.MoveBoardToAccountEnum = {
        Allowed: 'allowed',
        NotAllowed: 'not_allowed',
    };
    TeamSharingPolicySettingsChanges.RestrictAllowedDomainsEnum = {
        Enabled: 'enabled',
        EnabledWithExternalUserAccess: 'enabled_with_external_user_access',
        Disabled: 'disabled',
    };
    TeamSharingPolicySettingsChanges.SharingOnAccountEnum = {
        Allowed: 'allowed',
        NotAllowed: 'not_allowed',
    };
    TeamSharingPolicySettingsChanges.SharingOnOrganizationEnum = {
        Allowed: 'allowed',
        AllowedWithEditing: 'allowed_with_editing',
        NotAllowed: 'not_allowed',
    };
    TeamSharingPolicySettingsChanges.SharingViaPublicLinkEnum = {
        Allowed: 'allowed',
        AllowedWithEditing: 'allowed_with_editing',
        NotAllowed: 'not_allowed',
    };
})(TeamSharingPolicySettingsChanges = exports.TeamSharingPolicySettingsChanges || (exports.TeamSharingPolicySettingsChanges = {}));
