/**
 * Miro Developer Platform
 * <img src=\"https://content.pstmn.io/47449ea6-0ef7-4af2-bac1-e58a70e61c58/aW1hZ2UucG5n\" width=\"1685\" height=\"593\">  ### Miro Developer Platform concepts  - New to the Miro Developer Platform? Interested in learning more about platform concepts?? [Read our introduction page](https://beta.developers.miro.com/docs/introduction) and familiarize yourself with the Miro Developer Platform capabilities in a few minutes.   ### Getting started with the Miro REST API  - [Quickstart (video):](https://beta.developers.miro.com/docs/try-out-the-rest-api-in-less-than-3-minutes) try the REST API in less than 3 minutes. - [Quickstart (article):](https://beta.developers.miro.com/docs/build-your-first-hello-world-app-1) get started and try the REST API in less than 3 minutes.   ### Miro REST API tutorials  Check out our how-to articles with step-by-step instructions and code examples so you can:  - [Get started with OAuth 2.0 and Miro](https://beta.developers.miro.com/docs/getting-started-with-oauth)   ### Miro App Examples  Clone our [Miro App Examples repository](https://github.com/miroapp/app-examples) to get inspiration, customize, and explore apps built on top of Miro\'s Developer Platform 2.0.
 *
 * The version of the OpenAPI document: v2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * @internal
 * Contains frame item data, such as the title, frame type, or frame format.
 */
export declare class FrameData {
    /**
     * Only custom frames are supported at the moment.
     */
    'format'?: string | (typeof FrameData.FormatEnum)[keyof typeof FrameData.FormatEnum];
    /**
     * Title of the frame. This title appears at the top of the frame.
     */
    'title'?: string;
    /**
     * Only free form frames are supported at the moment.
     */
    'type'?: string | (typeof FrameData.TypeEnum)[keyof typeof FrameData.TypeEnum];
    /** @ignore */
    static discriminator: string | undefined;
    /** @ignore */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /** @ignore */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
export declare namespace FrameData {
    const FormatEnum: {
        readonly Custom: "custom";
        readonly Desktop: "desktop";
        readonly Phone: "phone";
        readonly Tablet: "tablet";
        readonly A4: "a4";
        readonly Letter: "letter";
        readonly Ratio1x1: "ratio_1x1";
        readonly Ratio4x3: "ratio_4x3";
        readonly Ratio16x9: "ratio_16x9";
    };
    const TypeEnum: {
        readonly Freeform: "freeform";
        readonly Heap: "heap";
        readonly Grid: "grid";
        readonly Rows: "rows";
        readonly Columns: "columns";
    };
}
